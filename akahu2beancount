#!/bin/sh

set -eu

DAYS_PRIOR="${1:-10}" # TODO: ensure > 0
export DAYS_PRIOR
TOKENSFILE="${2:-./tokens}"
export TOKENSFILE

main() {
	{ load transactions ${DAYS_PRIOR} || return 1; } |
	{ transform || return 1; } #|
	# compile 
}

load() {
	set -a
	# shellcheck disable=SC1090
	. "$TOKENSFILE" || return 1
	set +a

	cache $*
}

transactions() {
	dates=$(jq -nf date.jq) || return 1
	START=$(echo "$dates" | jq -r .start)
	export START
	END=$(echo "$dates" | jq -r .end)
	export END

	initial_response=$(curl -K get-initial-transactions.curl) || return 1
	iterate_transactions "${initial_response}"
}
iterate_transactions() {
        echo "$1" | jq '.items.[]' || return 1
	CURSOR=$(cursor "$1") || return 1
        export CURSOR
        [ "${CURSOR}" = null ] && return 0

        successive_response=$(curl -K get-initial-transactions.curl \
                              -K cursor.curl) || return 1
        iterate_transactions "${successive_response}" || return 1
}
cursor() {
	jq -n -r --argjson response "$1" '$response.cursor.next'
}

accounts() {
	curl -K get-accounts.curl | jq .items
}


transform() {
	jq -f transform.jq \
		--argjson accounts "$(load accounts)"
}

compile() {
	jq -fr compile.jq
}

cache() {
	command="$1"
	cachefile="$(get_cachefile "${command}")" || return 1
	if [ -f "$cachefile" ]; then
		cat "$cachefile"
	else 
		{ ${command} || return 1; } | tee "${cachefile}"
	fi
}
get_cachefile() {
	command_as_file="$(echo "${1}" | sed 's/ /-/')" || return 1
	echo "$(date +%Y-%m-%d)-${command_as_file}.json.data"

}

main
