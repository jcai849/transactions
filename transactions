#!/bin/ksh

set -euo pipefail

DAYS_PRIOR="${1:-10}"


main() {
	extract | combine | transform | compile
}


extract() {
	local DATE=$(date +%Y-%m-%d)
	local EXTRACTFILE="${DATE}--${DAYS_PRIOR}.json.data"
	if [ -f "${EXTRACTFILE}" ]; then
		cat "${EXTRACTFILE}" 
	else 
		extract-akahu | tee "${EXTRACTFILE}"
	fi
}
extract-akahu() {
	set -a
	. ./tokens
	set +a

	export END_EPOCH=$(date +%s)
	export DAYS_PRIOR_AS_SECS=60*60*24*${DAYS_PRIOR}
	export START_EPOCH=$((END_EPOCH-DAYS_PRIOR_AS_SECS))
	export START=$(date -j -zUTC -f%s +%F "${START_EPOCH}")
	export END=$(date -j -zUTC -f%s +%F "${END_EPOCH}")

	export INITIAL_RESPONSE=$(curl -K get-initial-transactions.curl) || return 1
	iterate_transactions "${INITIAL_RESPONSE}"
}
iterate_transactions() {
        echo "$1"
        export CURSOR=$(cursor "$1") || return 1
        [ "${CURSOR}" = null ] && return 0
        SUCCESSIVE_RESPONSE=$(curl -K get-initial-transactions.curl \
                              -K cursor.curl) || return 1
        iterate_transactions "${SUCCESSIVE_RESPONSE}" || return 1
}
cursor() {
	jq -n -r --argjson response "${1}" '$response.cursor.next'
}

combine() {
	jq -s 'reduce .[].items as $item ([]; . + $item)'
}

transform() {
	jq -f transform.jq
}

compile() {
	jq -fr compile.jq
}

main
